{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/ErrorBoundary/ErrorBoundary.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleSortByChange","bind","handleTermChange","handleLocationChange","handleSearch","sortByOptions","sortByOption","Object","keys","sortByOptionValue","getSortByClass","onClick","setState","event","target","value","searchYelp","preventDefault","renderSortByOptions","placeholder","onChange","href","Yelp","search","urlToFetch","fetch","headers","Authorization","process","then","response","json","jsonResponse","image_url","adress","address1","zip_code","categories","title","review_count","ErrorBoundary","hasError","error","errorInfo","children","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.93fd5945.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        const { business } = this.props;\r\n        return (\r\n            <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n                <img src={business.imageSrc} alt=''/>\r\n            </div>\r\n            <h2>{business.name}</h2>\r\n            <div className=\"Business-information\">\r\n                <div className=\"Business-address\">\r\n                <p>{business.address}</p>\r\n                <p>{business.city}</p>\r\n                <p>{business.state} {business.zipCode}</p>\r\n                </div>\r\n                <div className=\"Business-reviews\">\r\n                <h3>{business.category}</h3>\r\n                <h3 className=\"rating\">{business.rating} stars</h3>\r\n                <p>{business.reviewCount} reviews</p>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {\r\n                    this.props.businesses.map(business => {\r\n                        return <Business business={business} key={business.id} />;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n\r\n        this.handleSortByChange = this.handleSortByChange.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        \r\n        this.sortByOptions = {\r\n            \"Best Match\": 'best_match',\r\n            \"Highest Rated\": 'rating',\r\n            \"Most Reviewed\": 'review_count'\r\n        }\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        return this.state.sortBy === sortByOption ? 'active' : '';\r\n    }\r\n    \r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue} \r\n                className={this.getSortByClass(sortByOptionValue)} \r\n                onClick={this.handleSortByChange.bind(this , sortByOptionValue)}>\r\n                    {sortByOption}\r\n                </li>;\r\n        });\r\n    }\r\n\r\n    handleSortByChange(sortByOption){\r\n        this.setState({\r\n            sortBy: sortByOption\r\n        });\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({\r\n            location: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term , this.state.location , this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n            <div className=\"SearchBar-sort-options\">\r\n                <ul>\r\n                    {this.renderSortByOptions()}\r\n                </ul>\r\n            </div>\r\n            <div className=\"SearchBar-fields\">\r\n                <input placeholder=\"Search Businesses\"\r\n                    onChange={this.handleTermChange} />\r\n                <input placeholder=\"Where?\" \r\n                    onChange={this.handleLocationChange} />\r\n            </div>\r\n            <div className=\"SearchBar-submit\">\r\n                <a href=\"www.#.com\" \r\n                    onClick={this.handleSearch}>\r\n                    Let's Go\r\n                </a>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SearchBar;","const apiKey = process.env.REACT_APP_YELP_API_KEY;\r\n\r\nconst Yelp = {\r\n\r\n    search(term , location , sortBy) {\r\n        const urlToFetch = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\r\n        return fetch(\r\n            urlToFetch, \r\n            { \r\n                headers: { Authorization: `Bearer ${apiKey}` }\r\n            }\r\n        ).then((response) => {\r\n            return response.json();\r\n        }).then((jsonResponse) => {\r\n            if (jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map((business) => {\r\n                    // console.log(business);\r\n                    return {\r\n                        id: business.id ,\r\n                        imageSrc: business.image_url ,\r\n                        name: business.name , \r\n                        adress: business.location.address1 , \r\n                        city: business.location.city , \r\n                        state: business.location.state , \r\n                        zipCode: business.location.zip_code , \r\n                        category: business.categories[0].title ,\r\n                        rating: business.rating , \r\n                        reviewCount: business.review_count\r\n                    };\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n      // You can also log the error to an error reporting service\r\n    //   logErrorToMyService(error, errorInfo);\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>No results found. Try another Location and/or Business after reloading the page.</h1>;\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from '../BusinessList/BusinessList';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport Yelp from '../../util/Yelp';\r\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\r\n\r\n/* const business = {\r\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\r\n  name: 'MarginOtto Pizzeria',\r\n  address: '1010 Paddington Way',\r\n  city: 'Flavortown',\r\n  state: 'NY',\r\n  zipCode: '10101',\r\n  category: 'Italian',\r\n  rating: 4.5,\r\n  reviewCount: 900\r\n};\r\n\r\nconst businesses = [\r\n  business , \r\n  business , \r\n  business , \r\n  business , \r\n  business , \r\n  business\r\n]; */\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { businesses: [] };\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n\r\n  searchYelp(term , location , sortBy) {\r\n    // console.log(`Searching Yelp with parameter ${term}, ${location} and ${sortBy}`);\r\n    Yelp.search(term , location , sortBy).then((businesses) => {\r\n      this.setState({\r\n        businesses: businesses\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>ravenous</h1>\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <ErrorBoundary>\r\n          <BusinessList businesses={this.state.businesses} /> \r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './reset.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}